/*
---> const : 상수맴버변수, 한번 초기화하면 그 값을 변경할 수 없는 맴버변수
변수의 타입 앞에 const 키워드 사용


>> 가상함수 
--> 파생클레스에서 제정의할 것으로 기대하는 맴버함수
virtual 키워드 이용
 
 바인딩 : 함수를 호출하는 코드에서 어누 블록에 있는 함수를 실행하라는 의미로 해석


함수를 호출하는 코드 : 컴파일 타임에 고정된 메모리 주소로 변환 --> 정적 바인딩, 초기 바인딩

가상함수는 프로그램이 실행될때 객체를 결정, 컴파일 타임에 해당 객체 특정 불가능


>> 가상함수테이블 --> 컴파일러가 가상함수를 다루는 일반적인 방식


>> 추상클래스

가상함수 --> 제정의가 가능한 함수
순수가상함수 --> 파생클레스에서 반드시 재정의 하여야 하는 맴버함수


>> 함수템플릿

일반화 프로그래밍: 프로그램의 알고리즘에 그 중점을 둠, 대표저 기능 --> 템플릿

템플릿 -> 함수나 클레스를 생성하는 메커니즘, 타입이 매개변수에 의해 표현됨, 매개변수화 타입이라고도 불리움 
--> 타입마다 별도의 함수나 클래스 만들필요 없음, 여러타입에서 동작할 수 있는 단 하나의 함수나 클래스를 작성하는 것이 가능함

함수템플릿 -> 같은 알고리즘을 기반으로 하면서 서로 다른 타입에서 동작하는 함수를 한번에 정의 가능


클래스 템플릿
--> 클래스의 일반화된 선언
--> 사용자가 사용하고자하는 타입을 명시적으로 제공해야 함


중첩 클레스 템플릿
--> 클레스나 클레스템플릿 내에 또다른 템플릿을 중첩하여 정의 가능 --> 맴버 템플릿

명시적 특수화
--> 특수화를 명시하면 해당 타입에 대한 특별한 동작 정의 가능

부분 특수화
--> 템플릿 인수가 2개 이상이고 그중 일부에 대해서만 특수화를 해야 할때사용

typedef --> 템플릿 특수화를 위한 새로운 이름 선언 가능


반복자
STL --> C++ 표준템플릿 라이브러리, 프로그램의 알고리즘에 그 중점을 둠

반복자, 컨테이너, 알고리즘

컨테이너 --> 같은 타입의 객체를 저장하는 일종의 집합, 클래스 템플릿, 컨테이너 변수 선언시 컨테이너에 포함할 요소의 타입 명시 가능
반복자 --> 컨테이너에 저장된 요소를 반복적으로 순회, 각각의 요소에 대한 접근 제공,컨테이너에 저장된 데이터를 순회하는 과정을 일반화한 표헌

반복자가 가져야 할 요구사항
-> 가리키는 요소에 접근할 수 있어야 함, 참종연산자(*) 가 정의되어야 함
-> 반복자 사이에 대입, 비교연산이 가능해야 함, 대입, 관계연산자가 정의되어야 함
-> 가리키는 요소의 주변요소로 이동할 수 있어야함, 증가연산자 정의 필요

반복자 --> 포인터를 일반화, 포인터 --> 반복자가 가져야 할 모든 요구사항을 만족함


>> 컨테이너

시퀸스 컨테이너 - 데이터를 선형으로 저장, 가장 일반적인 컨테이너 
연관 컨테이너 - 일정 규칙에 따라 조직화하여 저장/관리하는 컨테이너
컨테이너 어답터 - 간결함과 명료함을 위하여 인터페이스를 제한한 시퀸스, 연과 컨테이너의 변형, 반복자 미지원


>> 시퀸스컨테이너

>> 연관컨테이너  --> key/value 처럼 관련있는 데이터를 하나의 쌍으로 저장하는 컨테이너

>> 집합컨테이너 --> 저장하는 데이터 그 자체를 키로 사용하는 컨테이너, 오름차순으로 요소 삽입 --> 검색속도가 빠름,

>> 맵컨테이너 --> key/value 로 데이터를 관리, 정렬된 위치에 요소 삽입 --> 검색 속도가 매우 빠름, 키의 중복허용 안함, 하나의 키에 하나의 값
(멀티맵은 값의 중복을 허용 --> 하나의 키가 여러개의 값 수용 가능)


>> 컨테니어 어답터
--> 특정 형태의 동작만 수행하도록 함, 반복자 미지원

스택 --> 후입선출구조, 반복자 미허용, 
큐 --> 선입선출, 선형 메모리 공간에 데이터 저장
우선순위 큐 --> 큐의 맨 앞에 가장 큰 값을 지닌 요소가 위치함, 값의 내림차순으로 정렬














*/